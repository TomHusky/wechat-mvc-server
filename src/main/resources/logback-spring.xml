<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="120 seconds" debug="false">
    <!-- scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
         scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
         debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
    -->
    <springProperty scop="context" name="spring.application.name" source="spring.application.name" defaultValue="app"/>
    <property name="LOG_HOME" value="logs/${spring.application.name}"/>

    <!-- root日志会输出到catalina日志中，默认应用是不需要设置。  -->
    <!-- 错误日志路径 -->
    <property name="FILE_PATH_ERROR" value="${LOG_HOME}/error.log"/>
    <property name="FILE_PATH_WARN" value="${LOG_HOME}/warn.log"/>
    <property name="FILE_PATH_INFO" value="${LOG_HOME}/info.log"/>
    <property name="FILE_PATH_DEBUG" value="${LOG_HOME}/debug.log"/>

    <!-- 异步日志提取调用者数据标识 true/false -->
    <property name="includeCallerData" value="true"/>
    <!-- 异步日志的队列容量 -->
    <property name="queueSize" value="256"/>
    <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 -->
    <property name="LOG_PATTERN"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level] [%thread] [%c][%M][%L] - %msg%n"/>

    <!-- 彩色日志 -->
    <!-- 彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
    <conversionRule conversionWord="wex"
                    converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>
    <conversionRule conversionWord="wEx"
                    converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>
    <!-- 彩色日志格式 -->
    <property name="CONSOLE_LOG_PATTERN"
              value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%thread]){faint} %clr(%-40.40logger{39}){cyan} %L %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>

    <!-- 控制台输出 -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
        </layout>
    </appender>
    <appender name="CONSOLE-ASYNC" class="ch.qos.logback.classic.AsyncAppender">
        <discardingThreshold>0</discardingThreshold>
        <queueSize>${queueSize}</queueSize>
        <includeCallerData>${includeCallerData}</includeCallerData>
        <appender-ref ref="CONSOLE"/>
    </appender>

    <!-- 按照每天生成日志文件 -->
    <appender name="FILE-ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--日志文件输出的文件名 -->
        <File>${FILE_PATH_ERROR}</File>
        <!--滚动日志 基于时间和文件大小-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 滚动日志文件保存格式 -->
            <FileNamePattern>${FILE_PATH_ERROR}.%d{yyyy-MM-dd}.%i.log</FileNamePattern>
            <!--压缩格式-->
            <!--<FileNamePattern>${FILE_PATH_ERROR}.%d{yyyy-MM-dd}.%i.log.gz</FileNamePattern>-->
            <MaxFileSize>60MB</MaxFileSize>
            <totalSizeCap>2GB</totalSizeCap>
            <MaxHistory>10</MaxHistory>
        </rollingPolicy>
        <!-- 按临界值过滤日志：低于ERROR以下级别被抛弃 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
        <encoder>
            <pattern>${LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>
    <appender name="FILE-ERROR-ASYNC" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>${queueSize}</queueSize>
        <includeCallerData>${includeCallerData}</includeCallerData>
        <appender-ref ref="FILE-ERROR"/>
    </appender>
    <appender name="FILE-INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--日志文件输出的文件名 -->
        <File>${FILE_PATH_INFO}</File>
        <!--滚动日志 基于时间和文件大小-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 滚动日志文件保存格式 -->
            <FileNamePattern>${FILE_PATH_INFO}.%d{yyyy-MM-dd}.%i.log</FileNamePattern>
            <MaxFileSize>60MB</MaxFileSize>
            <totalSizeCap>2GB</totalSizeCap>
            <MaxHistory>10</MaxHistory>
        </rollingPolicy>
        <!-- 按临界值过滤日志：低于INFO以下级别被抛弃 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
        <encoder>
            <pattern>${LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>
    <appender name="FILE-INFO-ASYNC" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>${queueSize}</queueSize>
        <includeCallerData>${includeCallerData}</includeCallerData>
        <appender-ref ref="FILE-INFO"/>
    </appender>
    <appender name="FILE-DEBUG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--日志文件输出的文件名 -->
        <File>${FILE_PATH_DEBUG}</File>
        <!--滚动日志 基于时间和文件大小-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 滚动日志文件保存格式 -->
            <FileNamePattern>${FILE_PATH_DEBUG}.%d{yyyy-MM-dd}.%i.log</FileNamePattern>
            <MaxFileSize>60MB</MaxFileSize>
            <totalSizeCap>2GB</totalSizeCap>
            <MaxHistory>10</MaxHistory>
        </rollingPolicy>
        <!-- 按临界值过滤日志：低于INFO以下级别被抛弃 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
        <!-- 不过滤日志 -->
        <encoder>
            <pattern>${LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>
    <appender name="FILE-DEBUG-ASYNC" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>${queueSize}</queueSize>
        <includeCallerData>${includeCallerData}</includeCallerData>
        <appender-ref ref="FILE-DEBUG"/>
    </appender>
    <springProfile name="dev">
        <logger name="org.springframework" level="INFO" additivity="false">
            <appender-ref ref="CONSOLE-ASYNC"/>
            <appender-ref ref="FILE-ERROR-ASYNC"/>
            <appender-ref ref="FILE-INFO-ASYNC"/>
            <appender-ref ref="FILE-DEBUG-ASYNC"/>
        </logger>
        <logger name="com.alibaba.nacos" level="INFO" additivity="false">
            <appender-ref ref="CONSOLE-ASYNC"/>
            <appender-ref ref="FILE-ERROR-ASYNC"/>
            <appender-ref ref="FILE-INFO-ASYNC"/>
            <appender-ref ref="FILE-DEBUG-ASYNC"/>
        </logger>
        <logger name="java.sql" level="DEBUG" additivity="false">
            <appender-ref ref="CONSOLE-ASYNC"/>
            <appender-ref ref="FILE-ERROR-ASYNC"/>
            <appender-ref ref="FILE-INFO-ASYNC"/>
            <appender-ref ref="FILE-DEBUG-ASYNC"/>
        </logger>
        <logger name="com.tomhusky" level="INFO" additivity="false">
            <appender-ref ref="CONSOLE-ASYNC"/>
            <appender-ref ref="FILE-ERROR-ASYNC"/>
            <appender-ref ref="FILE-INFO-ASYNC"/>
            <appender-ref ref="FILE-DEBUG-ASYNC"/>
        </logger>
        <!-- 日志输出级别 -->
        <root level="DEBUG">
            <appender-ref ref="CONSOLE-ASYNC"/>
            <appender-ref ref="FILE-ERROR-ASYNC"/>
            <appender-ref ref="FILE-INFO-ASYNC"/>
            <appender-ref ref="FILE-DEBUG-ASYNC"/>
        </root>
    </springProfile>
    <springProfile name="test">
        <logger name="org.springframework" level="INFO" additivity="false">
            <appender-ref ref="CONSOLE-ASYNC"/>
            <appender-ref ref="FILE-ERROR-ASYNC"/>
            <appender-ref ref="FILE-INFO-ASYNC"/>
            <appender-ref ref="FILE-DEBUG-ASYNC"/>
        </logger>
        <logger name="com.alibaba.nacos" level="INFO" additivity="false">
            <appender-ref ref="CONSOLE-ASYNC"/>
            <appender-ref ref="FILE-ERROR-ASYNC"/>
            <appender-ref ref="FILE-INFO-ASYNC"/>
            <appender-ref ref="FILE-DEBUG-ASYNC"/>
        </logger>
        <logger name="java.sql" level="DEBUG" additivity="false">
            <appender-ref ref="CONSOLE-ASYNC"/>
            <appender-ref ref="FILE-ERROR-ASYNC"/>
            <appender-ref ref="FILE-INFO-ASYNC"/>
            <appender-ref ref="FILE-DEBUG-ASYNC"/>
        </logger>
        <logger name="com.tomhusky" level="INFO" additivity="false">
            <appender-ref ref="CONSOLE-ASYNC"/>
            <appender-ref ref="FILE-ERROR-ASYNC"/>
            <appender-ref ref="FILE-INFO-ASYNC"/>
            <appender-ref ref="FILE-DEBUG-ASYNC"/>
        </logger>
        <!-- 日志输出级别 -->
        <root level="DEBUG">
            <appender-ref ref="CONSOLE-ASYNC"/>
            <appender-ref ref="FILE-ERROR-ASYNC"/>
            <appender-ref ref="FILE-INFO-ASYNC"/>
            <appender-ref ref="FILE-DEBUG-ASYNC"/>
        </root>
    </springProfile>

    <springProfile name="prod,pre">
        <logger name="org.springframework" level="WARN" additivity="false">
            <appender-ref ref="FILE-ERROR-ASYNC"/>
            <appender-ref ref="FILE-INFO-ASYNC"/>
        </logger>
        <logger name="com.alibaba.nacos" level="WARN" additivity="false">
            <appender-ref ref="FILE-ERROR-ASYNC"/>
            <appender-ref ref="FILE-INFO-ASYNC"/>
        </logger>
        <logger name="java.sql" level="INFO" additivity="false">
            <appender-ref ref="FILE-ERROR-ASYNC"/>
            <appender-ref ref="FILE-INFO-ASYNC"/>
        </logger>
        <logger name="com.tomhusky" level="INFO" additivity="false">
            <appender-ref ref="FILE-ERROR-ASYNC"/>
            <appender-ref ref="FILE-INFO-ASYNC"/>
        </logger>
        <!-- 日志输出级别 -->
        <root level="INFO">
            <appender-ref ref="FILE-ERROR-ASYNC"/>
            <appender-ref ref="FILE-INFO-ASYNC"/>
        </root>
    </springProfile>
</configuration>